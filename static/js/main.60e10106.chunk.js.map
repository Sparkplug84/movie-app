{"version":3,"sources":["components/Movie.js","components/Movies.js","components/Search.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","title","imdbID","featuredMovie","useState","movieInfo","setMovieInfo","movieDetails","setMovieDetails","getMovieDetails","a","MOVIE_API_DETAILS","fetch","res","json","details","useEffect","collapseInfo","className","src","Poster","alt","Title","onClick","icon","faInfo","faStar","color","imdbRating","Year","faTimes","size","Runtime","Director","Actors","Plot","href","target","rel","Movies","props","searchInput","darkMode","movies","length","setSearchInput","setMovies","map","movie","poster","year","Search","expand","setexpand","searchRef","useRef","type","placeholder","ref","value","onChange","e","current","focus","faSearch","Header","setMode","setDarkMode","faSun","faMoon","App","featuredMovies","Math","floor","random","getMovies","MOVIE_API","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0VA8GeA,MAvGf,YAA8C,IAA9BC,EAA6B,EAA7BA,MAAMC,EAAuB,EAAvBA,OAAOC,EAAgB,EAAhBA,cACzB,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAAe,uCAAG,gCAAAC,EAAA,6DAEdC,EAFc,qCAEoCT,GAAkBC,EAFtD,4BAGFS,MAAMD,GAHJ,cAGdE,EAHc,gBAIEA,EAAIC,OAJN,QAIdC,EAJc,SAMlBP,EAAgBO,GANE,2CAAH,qDAUrBC,qBAAU,WAENP,MACD,IAGH,IAKMQ,EAAe,WAEjBX,GAAa,IAGjB,OACI,qCACI,sBAAkBY,UAAU,QAA5B,UACI,qBAAKA,UAAU,eAAeC,IAA6B,QAAxBZ,EAAaa,OAAmBb,EAAaa,OAAS,yHAA0HC,IAAKpB,IACxN,sBAAKiB,UAAU,iBAAf,UACI,sBAAKA,UAAU,eAAf,UACI,6BAAKX,EAAae,QAClB,qBAAKJ,UAAU,kBAAkBK,QAjBlC,WAEfjB,GAAa,IAeG,SACI,cAAC,IAAD,CAAiBkB,KAAMC,WAG/B,sBAAKP,UAAU,eAAf,UACI,kCAAO,cAAC,IAAD,CAAiBA,UAAU,kBAAkBM,KAAME,IAAQC,MAAM,YAAYpB,EAAaqB,cACjG,gCAAQrB,EAAasB,eAXvB3B,GAiBV,qBAAKgB,UAAS,uBAAkBb,EAAY,oBAAsB,MAAlE,SACI,sBAAKa,UAAU,wBAAf,UACI,sBAAKA,UAAU,qBAAf,UACI,+CACA,cAAC,IAAD,CAAiBA,UAAU,OAAOM,KAAMM,IAASC,KAAO,KAAKR,QAASN,OAG1E,gCACI,kCACI,qBAAIC,UAAU,uBAAd,UACI,oBAAIA,UAAU,wBAAd,SAAsC,oDACtC,oBAAIA,UAAU,qBAAd,SAAoCX,EAAae,WAErD,qBAAIJ,UAAU,uBAAd,UACI,oBAAIA,UAAU,wBAAd,SAAsC,qDACtC,oBAAIA,UAAU,qBAAd,SAAoCX,EAAasB,UAErD,qBAAIX,UAAU,uBAAd,UACI,oBAAIA,UAAU,wBAAd,SAAsC,gDACtC,oBAAIA,UAAU,qBAAd,SAAoCX,EAAayB,aAErD,qBAAId,UAAU,uBAAd,UACI,oBAAIA,UAAU,wBAAd,SAAsC,oDACtC,oBAAIA,UAAU,qBAAd,SAAoCX,EAAaqB,gBAErD,qBAAIV,UAAU,uBAAd,UACI,oBAAIA,UAAU,wBAAd,SAAsC,iDACtC,oBAAIA,UAAU,qBAAd,SAAoCX,EAAa0B,cAErD,qBAAIf,UAAU,uBAAd,UACI,oBAAIA,UAAU,wBAAd,SAAsC,6CACtC,oBAAIA,UAAU,qBAAd,SAAoCX,EAAa2B,YAErD,qBAAIhB,UAAU,uBAAd,UACI,oBAAIA,UAAU,wBAAd,SAAsC,kDACtC,oBAAIA,UAAU,qBAAd,SAAoCX,EAAa4B,eAI3DjC,EACE,qBAAKgB,UAAU,cAAf,SACI,oBAAGkB,KAAI,qCAAgClC,EAAhC,KAA2CmC,OAAO,SAASC,IAAI,aAAtE,6BAAmG,qBAAKnB,IAAI,6GAA6GE,IAAI,cAGjO,UAKZ,qBAAKH,UAAS,gBAAWb,EAAY,iBAAmB,MAAQkB,QAASN,Q,MCzEtEsB,MA5Bf,SAAgBC,GAQZ,OACI,qCACMA,EAAMC,YACJ,sBAAKvB,UAAU,kBAAf,UACI,mBAAGA,UAAS,UAAKsB,EAAME,SAAW,KAAO,qBAAzC,mBAAoEF,EAAMG,OAAOC,OAAjF,+BAA8GJ,EAAMC,YAApH,OACA,wBAAQlB,QAXL,WAEfiB,EAAMK,eAAe,IACrBL,EAAMM,UAAU,KAQJ,sBAEN,KAEF,qBAAK5B,UAAU,oBAAf,SAEQsB,EAAMG,OAAOI,KAAI,SAACC,GAAD,OACb,cAAC,EAAD,CAA0B/C,MAAO+C,EAAM1B,MAAO2B,OAAQD,EAAM5B,OAAQlB,OAAQ8C,EAAM9C,OAAQgD,KAAMF,EAAMnB,MAA1FmB,EAAM9C,iB,MCU3BiD,MA7Bf,YAA2D,IAA1CV,EAAyC,EAAzCA,YAAaI,EAA4B,EAA5BA,eAC1B,GADsD,EAAZC,UACd1C,oBAAS,IAArC,mBAAOgD,EAAP,KAAeC,EAAf,KACMC,EAAYC,mBAQlB,OACI,qBAAKrC,UAAU,oBAAf,SACI,sBAAKA,UAAS,iBAAYkC,EAAS,SAAW,MAA9C,UACI,uBACII,KAAK,OACLtC,UAAU,gBACVuC,YAAY,wBACZC,IAAKJ,EACLK,MAAOlB,EACPmB,SAAU,SAACC,GAAD,OAAOhB,EAAegB,EAAExB,OAAOsB,UAE7C,wBAAQzC,UAAU,iBAAiBK,QAjB1B,WAEjB8B,GAAWD,GACXE,EAAUQ,QAAQC,SAcV,SACI,cAAC,IAAD,CAAiBvC,KAAMwC,c,MCE5BC,MAvBf,SAAgBzB,GAEZ,IAAM0B,EAAU,WAEZ1B,EAAM2B,aAAa3B,EAAME,WAE7B,OACQ,gCACI,sBAAKxB,UAAU,YAAf,UACI,qBAAKC,IAAI,+EAA+EE,IAAI,KAC5F,8CAEJ,qBAAKH,UAAU,YAAf,SACMsB,EAAME,SACJ,cAAC,IAAD,CAAiBlB,KAAM4C,IAAOrC,KAAK,KAAKJ,MAAM,OAAOJ,QAAS2C,IAE9D,cAAC,IAAD,CAAiB1C,KAAM6C,IAAQtC,KAAK,KAAKJ,MAAM,OAAOJ,QAAS2C,U,MCkCxEI,MAjDf,WACE,MAA4BlE,mBAAS,IAArC,mBAAOuC,EAAP,KAAeG,EAAf,KACA,EAAsC1C,mBAAS,IAA/C,mBAAOqC,EAAP,KAAoBI,EAApB,KACA,EAAgCzC,oBAAS,GAAzC,mBAAOsC,EAAP,KAAiByB,EAAjB,KACMI,EAAkB,CAAC,YAAa,YAAa,YAAa,YAAa,aAEzEpE,EAAgBoE,EAAeC,KAAKC,MAAMD,KAAKE,SAASH,EAAe3B,SAErE+B,EAAS,uCAAG,WAAOlC,GAAP,mBAAA/B,EAAA,6DAEVkE,EAFU,qCAEgCnC,EAFhC,4BAGE7B,MAAMgE,GAHR,cAGV/D,EAHU,gBAIGA,EAAIC,OAJP,QAIV+D,EAJU,QAKR1B,QACNL,EAAU+B,EAAK1B,QAND,2CAAH,sDAkBf,OARAnC,qBAAU,WAER2D,EAAUlC,GACU,KAAhBA,GACFK,EAAU,MAEX,CAACL,IAGF,qCACE,iEAAkCC,EAAW,KAAO,wBACpD,sBAAKxB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQwB,SAAUA,EAAUyB,YAAaA,IACzC,sBAAKjD,UAAU,YAAf,UACE,cAAC,EAAD,CAAQuB,YAAaA,EAAaI,eAAgBA,EAAgBC,UAAWA,IAC3EL,EACA,cAAC,EAAD,CAAQE,OAAQA,EAAQF,YAAaA,EAAaI,eAAgBA,EAAgBC,UAAWA,EAAWJ,SAAUA,IAElH,qCACE,qBAAKxB,UAAS,0BAAqBwB,EAAW,KAAO,eAArD,SACE,kDAEF,cAAC,EAAD,CAAOvC,cAAeA,iBCnCrB2E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.60e10106.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfo } from '@fortawesome/free-solid-svg-icons'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport './Movie.css'\n\nfunction Movie({title,imdbID,featuredMovie}) {\n    const [movieInfo, setMovieInfo] = useState(false)\n    const [movieDetails, setMovieDetails] = useState({})\n\n    const getMovieDetails = async () => {\n        // Function to call the API to retrieve further movie details from the imdbID or featured movie ID\n        const MOVIE_API_DETAILS = `https://www.omdbapi.com/?i=${imdbID ? imdbID : featuredMovie}&apikey=aa19cb4`\n        const res = await fetch(MOVIE_API_DETAILS)\n        const details = await res.json()\n        if(details) {\n          setMovieDetails(details)\n        }\n      }\n\n    useEffect(() => {\n        // Function to call the API function above on loading\n        getMovieDetails()\n    }, [])\n      \n\n    const revealInfo = () => {\n        // Function to show additional movie info\n        setMovieInfo(true)\n    }\n    \n    const collapseInfo = () => {\n        // Function to collapse additional movie info\n        setMovieInfo(false)\n    }\n\n    return (\n        <>\n            <div key={imdbID} className=\"movie\">\n                <img className=\"movie__image\" src={movieDetails.Poster !== \"N/A\" ? movieDetails.Poster : \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/1200px-No-Image-Placeholder.svg.png\"} alt={title} />\n                <div className=\"movie__details\">\n                    <div className=\"movie__title\">\n                        <h4>{movieDetails.Title}</h4>\n                        <div className=\"movie__infoIcon\" onClick={revealInfo}>\n                            <FontAwesomeIcon icon={faInfo} />\n                        </div>\n                    </div>\n                    <div className=\"movie__title\">\n                        <small><FontAwesomeIcon className=\"movie__starIcon\" icon={faStar} color=\"#ffd230\"/>{movieDetails.imdbRating}</small>\n                        <small>{movieDetails.Year}</small>\n                    </div>\n                </div>\n                \n            </div>\n\n            <div className={`movie__popup ${movieInfo ? 'movie__infoReveal' : null}`}>\n                <div className=\"movie__popupContainer\">\n                    <div className=\"movie__popupHeader\">\n                        <h3>Movie Details</h3>\n                        <FontAwesomeIcon className=\"icon\" icon={faTimes} size = '2x' onClick={collapseInfo}/>\n                    </div>\n                    \n                    <table>\n                        <tbody>\n                            <tr className=\"movie__infoContainer\">\n                                <td className=\"movie__infoCategories\"><strong>Movie Title:</strong></td>\n                                <td className=\"movie__infoDetails\">{movieDetails.Title}</td>\n                            </tr>\n                            <tr className=\"movie__infoContainer\">\n                                <td className=\"movie__infoCategories\"><strong>Release Year:</strong></td>\n                                <td className=\"movie__infoDetails\">{movieDetails.Year}</td>\n                            </tr>\n                            <tr className=\"movie__infoContainer\">\n                                <td className=\"movie__infoCategories\"><strong>Runtime:</strong></td>\n                                <td className=\"movie__infoDetails\">{movieDetails.Runtime}</td>\n                            </tr>\n                            <tr className=\"movie__infoContainer\">\n                                <td className=\"movie__infoCategories\"><strong>IMDB rating:</strong></td>\n                                <td className=\"movie__infoDetails\">{movieDetails.imdbRating}</td>\n                            </tr>\n                            <tr className=\"movie__infoContainer\">\n                                <td className=\"movie__infoCategories\"><strong>Director:</strong></td>\n                                <td className=\"movie__infoDetails\">{movieDetails.Director}</td>\n                            </tr>\n                            <tr className=\"movie__infoContainer\">\n                                <td className=\"movie__infoCategories\"><strong>Cast:</strong></td>\n                                <td className=\"movie__infoDetails\">{movieDetails.Actors}</td>\n                            </tr>\n                            <tr className=\"movie__infoContainer\">\n                                <td className=\"movie__infoCategories\"><strong>Storyline:</strong></td>\n                                <td className=\"movie__infoDetails\">{movieDetails.Plot}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    { imdbID ?\n                        <div className=\"movie__link\">\n                            <a href={`https://www.imdb.com/title/${imdbID}/`} target=\"_blank\" rel=\"noreferrer\">View details on <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/69/IMDB_Logo_2016.svg/1200px-IMDB_Logo_2016.svg.png\" alt=\"IMDB\"></img></a>\n                        </div>\n                        :\n                        null\n                    }\n                </div>\n                \n            </div>\n            <div className={`modal ${movieInfo ? 'modal__display' : null}`} onClick={collapseInfo}></div>\n        </>\n    )\n}\n\nexport default Movie\n","import React from 'react'\nimport Movie from './Movie'\nimport './Movies.css'\n\nfunction Movies(props) {\n\n    const resetInput = () => {\n        // Function to clear the search input field and reset the movies array to empty\n        props.setSearchInput(\"\");\n        props.setMovies([])\n      };\n\n    return (\n        <>\n            { props.searchInput ?\n                <div className=\"movies__results\">\n                    <p className={`${props.darkMode ? null : 'movies__lightMode'}`}>{`${props.movies.length} results found for \"${props.searchInput}\"`}</p>\n                    <button onClick={resetInput}>Clear</button>\n                </div>\n            : null\n            }\n            <div className=\"movies__container\">\n                {\n                    props.movies.map((movie) =>(\n                        <Movie key={movie.imdbID} title={movie.Title} poster={movie.Poster} imdbID={movie.imdbID} year={movie.Year} />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\nexport default Movies\n","import React, {useState, useRef} from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport './Search.css'\n\nfunction Search({searchInput, setSearchInput, setMovies}) {\n    const [expand, setexpand] = useState(false)\n    const searchRef = useRef();\n\n    const expandSearch = () => {\n        // Function to toggle the search input expand feature\n        setexpand(!expand)\n        searchRef.current.focus()\n    }\n\n    return (\n        <div className=\"search__container\">\n            <div className={`search ${expand ? 'active' : null}`}>\n                <input \n                    type=\"text\" \n                    className=\"search__input\" \n                    placeholder=\"Search for a movie...\" \n                    ref={searchRef} \n                    value={searchInput} \n                    onChange={(e) => setSearchInput(e.target.value)} \n                />\n                <button className=\"search__button\" onClick={expandSearch}>\n                    <FontAwesomeIcon icon={faSearch} />\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Search\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSun } from '@fortawesome/free-solid-svg-icons'\nimport { faMoon } from '@fortawesome/free-solid-svg-icons'\nimport './Header.css'\n\nfunction Header(props) {\n\n    const setMode = () => {\n        // Function to toggle the light/dark mode\n        props.setDarkMode(!props.darkMode)\n    }\n    return (\n            <nav>\n                <div className=\"nav__logo\">\n                    <img src=\"https://i.pinimg.com/originals/6b/4a/73/6b4a738dd051ec314307435efa574807.png\" alt=\"\" />\n                    <h2>Movie App</h2>\n                </div>\n                <div className=\"nav__mode\">\n                    { props.darkMode ?\n                        <FontAwesomeIcon icon={faSun} size='2x' color=\"#fff\" onClick={setMode} />\n                        :\n                        <FontAwesomeIcon icon={faMoon} size='2x' color=\"#fff\" onClick={setMode} />\n                    }\n                </div>\n            </nav>\n    )\n}\n\nexport default Header\n","import React, {useEffect, useState} from 'react';\nimport Movies from './components/Movies'\nimport Search from './components/Search'\nimport Header from './components/Header';\nimport Movie from './components/Movie';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([])\n  const [searchInput, setSearchInput] = useState('')\n  const [darkMode, setDarkMode] = useState(true)\n  const featuredMovies = (['tt1675434', 'tt0758758', 'tt0114369', 'tt0119488', 'tt0488120'])\n  // Randomly display one of five featured movies above on landing at webpage\n  var featuredMovie = featuredMovies[Math.floor(Math.random()*featuredMovies.length)];\n\n  const getMovies = async (searchInput) => {\n    // Function to call the API dynamically with the search input and save the results in a variable\n    const MOVIE_API = `https://www.omdbapi.com/?s=${searchInput}&apikey=aa19cb4`\n    const res = await fetch(MOVIE_API)\n    const data = await res.json()\n    if(data.Search) {\n      setMovies(data.Search)\n    }\n  }\n\n  useEffect(() => {\n    // Function to call the API every time the application loads\n    getMovies(searchInput)\n    if (searchInput === '') {\n      setMovies([])\n    }\n  }, [searchInput])\n\n  return (\n    <>\n      <style>{`body {background-color:${darkMode ? null : 'rgb(218, 218, 218)'}`}</style>\n      <div className=\"App\">\n        <Header darkMode={darkMode} setDarkMode={setDarkMode}/>\n        <div className=\"container\">  \n          <Search searchInput={searchInput} setSearchInput={setSearchInput} setMovies={setMovies} />\n          { searchInput ? \n            <Movies movies={movies} searchInput={searchInput} setSearchInput={setSearchInput} setMovies={setMovies} darkMode={darkMode} />\n            :\n            <>\n              <div className={`featured__movie ${darkMode ? null : 'text__black'}`}>\n                <h2>Featured Movie</h2>\n              </div>\n              <Movie featuredMovie={featuredMovie} />\n            </>\n          }\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}